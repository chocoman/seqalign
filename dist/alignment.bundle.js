!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("seqalign",[],e):"object"==typeof exports?exports.seqalign=e():t.seqalign=e()}(this,function(){return function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(i,r,function(e){return t[e]}.bind(null,r));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=130)}({129:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Counter=class{constructor(){this.dictionary={}}increment(t,e){this.dictionary[t]||(this.dictionary[t]=0),this.dictionary[t]+=e,0===this.dictionary[t]&&delete this.dictionary[t]}get(t){return this.dictionary[t]?this.dictionary[t]:0}getIntersectSize(t){let e=0;for(let n in this.dictionary)e+=Math.min(this.get(n),t.get(n));return e}}},130:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=n(129);var r;!function(t){t[t.Begin=0]="Begin",t[t.Insert=1]="Insert",t[t.Substitute=2]="Substitute",t[t.Match=3]="Match",t[t.Delete=4]="Delete"}(r||(r={}));const o=15;e.Alignment=class{constructor(t,e,n,i,r){this.a=t,this.distance=e,this.insertionPenalty=n,this.deletionPenalty=i,this.chunkSize=r}push(t){this.a.push(t)}findBestMatchForPattern(t,e,n){const r=new i.Counter,l=new i.Counter;for(let n=0;n<t.length;n+=1)r.increment(t[n],1),l.increment(this.a[e+n],1);let s=0,c=0;for(let i=e;i<n-t.length;i+=1){const e=l.getIntersectSize(r);e>s&&(s=e,c=i),l.increment(this.a[i],-1),l.increment(this.a[i+t.length],1)}if(s<.5*o)return[null,null];const[u,a]=this.getMatchingWords(t,this.a.slice(c,c+o));return null===u?[null,null]:[u,c+a]}getCountInArray(t,e){let n=0;for(let i=0;i<e.length;i+=1)e[i]===t&&(n+=1);return n}getMatchingWords(t,e){for(let n=0;n<t.length;n+=1)for(let i=Math.max(0,n-2);i<Math.min(e.length,n+3);i+=1)if(t[n]===e[i]&&1===this.getCountInArray(t[n],t)&&1===this.getCountInArray(e[i],e))return[n,i];return[null,null]}getPivots(t,e,n){const i=Math.floor(.5*t.length),r=Math.floor(.8*t.length),o=Math.floor(.05*t.length);for(let l=i;l<r;l+=o){const[i,r]=this.getPivotsAt(t,e,n,l);if(null!==i)return[i,r]}throw new Error("no match found")}getPivotsAt(t,e,n,i){const r=i+o,l=t.slice(i,r).map(t=>t.trim()),[s,c]=this.findBestMatchForPattern(l,e,n);return null===s?[null,null]:[i+s,c]}match(t,e,n){if(n-e>this.chunkSize&&t.length>this.chunkSize){const[i,r]=this.getPivots(t,e,n),{distance:o,matchIndices:l}=this.match(t.slice(0,i),e,r),{distance:s,matchIndices:c}=this.match(t.slice(i),r,n);return{distance:o+s,matchIndices:l.concat(c)}}const i=[],o=[],l=this.a.slice(e,n);for(let e=0;e<=t.length;e++)i[e]=[],o[e]=[];i[0][0]=0,o[0][0]=r.Begin;for(let t=1;t<=l.length;t++)i[0][t]=i[0][t-1]+this.insertionPenalty(l[t-1],null),o[0][t]=r.Begin;for(let e=1;e<=t.length;e++)i[e][0]=i[e-1][0]+this.deletionPenalty(t[e-1]),o[e][0]=r.Delete;for(let e=1;e<=t.length;e++)for(let n=1;n<=l.length;n++){const a=this.distance(t[e-1],l[n-1]);var s=i[e-1][n-1]+a,c=i[e][n-1]+this.insertionPenalty(l[n-1],t[e-1]),u=i[e-1][n]+this.deletionPenalty(t[e-1]);s<c&&s<u?(i[e][n]=s,o[e][n]=0===a?r.Match:r.Substitute):c<u?(i[e][n]=c,o[e][n]=r.Insert):(i[e][n]=u,o[e][n]=r.Delete)}let a=t.length,h=l.length,f=o[a][h];const d=new Array(t.length).fill(0);for(var g=0;f!==r.Begin&&!(a<0||h<0);g++)f===r.Substitute?(a-=1,h-=1):f===r.Delete?(a-=1,h=h):f===r.Insert?(a=a,h-=1):f===r.Match&&(a-=1,h-=1),f!==r.Insert&&(d[a]=e+Math.min(h,l.length-1)),f=o[a][h];return{distance:i[t.length][l.length],matchIndices:d}}}}})});
//# sourceMappingURL=alignment.bundle.js.map